#+title: README
#+author: Neddiendrohu

* ALVM
Basic 64bit register-based bytecode virtual machine written in C++20.
The bytecode mnemonics are almost identical to that of x86.
Has 32 64bit wide general purpose registers =%r0 - %r31=.
Ships with a basic assembler that is inspired by NASM and MASM.

** Build
*** Linux
- Requires CMake 3.20+
- Clang 16.0.6+
- Make
Do
#+BEGIN_SRC bash
chmod 772 build
#+END_SRC
and then run
#+BEGIN_SRC bash
./build
#+END_SRC
If the compilation was successful, you should see the binaries at =bin/=.

*** Windows
Coming up.

** Usage
*** ALASM
Command format: =alasm [file] [options]=
Compiles the ALVM assembler code to bytecode in binary.

Options:
- =-o [path]=: Specifies the output location.
- =-d=: Prints the code generated by the assembler.
- =-D=: Stores the code generated by the assembler in a file ending with `.int`.

*** ALVM
Command format: =alvm [file]=
Execute the bytecode.

** Plans
- Write few simple terminal games in ALVM assembly.
- Write very basic C compiler that compiles to ALVM bytecode.
- Compile ALVM bytecode to machine code by first generating x86 AT&T assembly and then compiling it with GCC to machine.
- Create a scripting language that compiles to ALVM bytecode.
